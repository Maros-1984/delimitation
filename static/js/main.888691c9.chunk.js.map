{"version":3,"sources":["components/Area/Area.js","components/Loader/Loader.js","components/VerticalMove/VerticalMove.js","components/HorizontalMove/HorizontalMove.js","components/InbetweenDot/InbetweenDot.js","components/Game/Game.js","components/Game/backendCalls.js","App.js","reportWebVitals.js","index.js"],"names":["Area","gameWidth","color","areaStyle","paddingBottom","width","className","toLowerCase","style","Loader","VerticalMove","cellIndex","rowIndex","possibleMoves","verticalBorderStyle","find","pm","areaX","areaY","right","isPossibleRightMove","HorizontalMove","horizontalBorderStyle","bottom","isPossibleBottomMove","InbetweenDot","borderWidth","dotStyle","Game","gameState","useState","setGame","useEffect","fetch","backendUrl","method","body","headers","then","response","json","data","useCreateNewGame","areas","length","map","row","cell","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.888691c9.chunk.js","sourcesContent":["export const Area = ({gameWidth, color}) => {\r\n    const areaStyle = {\r\n        paddingBottom: gameWidth,\r\n        width: gameWidth,\r\n    };\r\n\r\n    return <td className={color.toLowerCase()} style={areaStyle}/>;\r\n};","import './Loader.css';\r\n\r\nexport const Loader = () => <div className=\"loader\"/>;","export const VerticalMove = ({cellIndex, gameWidth, rowIndex, possibleMoves}) => {\r\n    const areaWidth = 90 / gameWidth + '%';\r\n    const borderWidth = 10 / (gameWidth + 1) + '%';\r\n\r\n    const verticalBorderStyle = {\r\n        paddingBottom: areaWidth,\r\n        width: borderWidth,\r\n    }\r\n\r\n    const isPossibleRightMove = (rowIndex, cellIndex) => possibleMoves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.right);\r\n\r\n    return <>\r\n        {cellIndex !== gameWidth - 1 &&\r\n        <td style={verticalBorderStyle}\r\n            className={isPossibleRightMove(rowIndex, cellIndex) ? 'possibleMove border' : 'border'}/>}\r\n    </>;\r\n};","export const HorizontalMove = ({rowIndex, cellIndex, gameWidth, possibleMoves}) => {\r\n    const areaWidth = 90 / gameWidth + '%';\r\n    const borderWidth = 10 / (gameWidth + 1) + '%';\r\n\r\n    const horizontalBorderStyle = {\r\n        paddingBottom: borderWidth,\r\n        width: areaWidth,\r\n    }\r\n\r\n    const isPossibleBottomMove = (rowIndex, cellIndex) => possibleMoves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.bottom);\r\n\r\n    return <td style={horizontalBorderStyle}\r\n               className={isPossibleBottomMove(rowIndex, cellIndex) ? 'possibleMove border' : 'border'}\r\n    />;\r\n};","export const InbetweenDot = ({cellIndex, gameWidth}) => {\r\n    const borderWidth = 10 / (gameWidth + 1) + '%';\r\n\r\n    const dotStyle = {\r\n        paddingBottom: borderWidth,\r\n        width: borderWidth,\r\n    }\r\n\r\n    return <>\r\n        {cellIndex !== gameWidth - 1 &&\r\n        <td\r\n            style={dotStyle} className={'border'}/>}\r\n    </>;\r\n};","import './Game.css';\r\nimport {Fragment} from \"react\";\r\nimport {useCreateNewGame} from \"./backendCalls\";\r\nimport {Area, HorizontalMove, InbetweenDot, Loader, VerticalMove} from \"..\";\r\n\r\nconst Game = () => {\r\n    const gameState = useCreateNewGame()\r\n\r\n    if (!gameState) {\r\n        return <Loader/>\r\n    }\r\n\r\n    const gameWidth = gameState.areas[0].length;\r\n\r\n    return (\r\n        <div>\r\n            &nbsp;\r\n            <table>\r\n                <tbody>\r\n                {gameState.areas.map((row, rowIndex) => {\r\n                    return (\r\n                        <Fragment key={'row-' + rowIndex}>\r\n                            <tr>\r\n                                {row.map((cell, cellIndex) => {\r\n                                    return (\r\n                                        <Fragment key={'cell-' + rowIndex + \"-\" + cellIndex}>\r\n                                            <Area gameWidth={gameWidth} color={cell}/>\r\n                                            <VerticalMove cellIndex={cellIndex} gameWidth={gameWidth}\r\n                                                          rowIndex={rowIndex} possibleMoves={gameState.possibleMoves}/>\r\n                                        </Fragment>)\r\n                                })}\r\n                            </tr>\r\n                            {rowIndex !== gameState.areas.length - 1 && (\r\n                                <tr key={'bottom-borders-of-row-' + rowIndex}>\r\n                                    {row.map((cell, cellIndex) => {\r\n                                        return (<Fragment key={'bottom-border-of-cell-' + rowIndex + \"-\" + cellIndex}>\r\n                                                <HorizontalMove rowIndex={rowIndex} cellIndex={cellIndex}\r\n                                                                gameWidth={gameWidth}\r\n                                                                possibleMoves={gameState.possibleMoves}/>\r\n                                                <InbetweenDot cellIndex={cellIndex} gameWidth={gameWidth}/>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                    }\r\n                                </tr>)}\r\n                        </Fragment>)\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import {useEffect, useState} from \"react\";\r\nimport {backendUrl} from \"./configuration\";\r\n\r\nexport const useCreateNewGame = () => {\r\n    const [gameState, setGame] = useState()\r\n\r\n    useEffect(() => {\r\n        fetch(backendUrl + \"create-new-game\", {\r\n            method: 'POST', body: \"{}\", headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => setGame(data));\r\n    }, [])\r\n\r\n    return gameState;\r\n}","import Game from \"./components/Game/Game\";\n\nconst App = () => <Game/>;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}