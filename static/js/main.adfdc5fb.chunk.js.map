{"version":3,"sources":["components/Game/configuration.js","hooks/useWindowDimensions.js","components/Loader/Loader.js","components/Area/Area.js","components/VerticalMove/VerticalMove.js","components/HorizontalMove/HorizontalMove.js","components/InbetweenDot/InbetweenDot.js","components/InfoMessage/InfoMessage.js","components/Game/Game.js","hooks/useCreateNewGame.js","hooks/useMakeMove.js","hooks/useWaitingForAnotherPlayer.js","App.js","reportWebVitals.js","index.js"],"names":["BACKEND_URL","getWindowDimensions","window","width","innerWidth","height","innerHeight","Loader","className","Area","gameWidth","color","areaX","areaY","setHighlightedMove","moveToMake","areaWidth","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","areaStyle","paddingBottom","onMouseMove","e","x","nativeEvent","offsetX","y","offsetY","bottom","right","toLowerCase","style","VerticalMove","cellIndex","rowIndex","game","highlightedMove","verticalBorderStyle","isHighlighted","madeMoveColor","moves","find","pm","possibleMoves","isPossibleRightMove","HorizontalMove","horizontalBorderStyle","isPossibleBottomMove","InbetweenDot","borderWidth","dotStyle","InfoMessage","length","playerOnMove","over","blue","score","red","Game","setMoveToMake","setGame","gameId","document","location","hash","substring","lastPlayerColor","sessionStorage","getItem","fetch","method","body","JSON","stringify","playerAsking","headers","then","response","json","data","setItem","yourPlayerColor","useCreateNewGame","move","player","useMakeMove","setTimeout","incremental","useWaitingForAnotherPlayer","areas","onClick","map","row","cell","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.adfdc5fb.chunk.js","sourcesContent":["export const BACKEND_URL = 'https://delimitation.ey.r.appspot.com/';\r\nexport const BORDER_PERCENTAGE_OF_AREA = 5","import {useEffect, useState} from 'react';\r\n\r\nconst getWindowDimensions = () => {\r\n    const {innerWidth: width, innerHeight: height} = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n};\r\n\r\nexport const useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import './Loader.css';\r\n\r\nexport const Loader = () => <div className=\"loader\"/>;","import {useWindowDimensions} from \"../../hooks/useWindowDimensions\";\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {BORDER_PERCENTAGE_OF_AREA} from \"../Game/configuration\";\r\n\r\nexport const Area = ({gameWidth, color, areaX, areaY, setHighlightedMove, moveToMake}) => {\r\n    const {width} = useWindowDimensions()\r\n    const areaWidth = (100 - BORDER_PERCENTAGE_OF_AREA) / 100 / gameWidth * width;\r\n\r\n    const areaStyle = {\r\n        paddingBottom: areaWidth + \"px\",\r\n        width: areaWidth + \"px\",\r\n    };\r\n\r\n    const handleMouseMove = (e) => {\r\n        let x = e.nativeEvent.offsetX;\r\n        let y = e.nativeEvent.offsetY;\r\n\r\n        if (x > y) {\r\n            if (areaWidth - x > y) {\r\n                // Highlight upper border.\r\n                setHighlightedMove({areaX, areaY: areaY - 1, bottom: true})\r\n            } else {\r\n                // Highlight right border.\r\n                setHighlightedMove({areaX, areaY, right: true})\r\n            }\r\n        } else {\r\n            if (areaWidth - x > y) {\r\n                // Highlight left border.\r\n                setHighlightedMove({areaX: areaX - 1, areaY, right: true})\r\n            } else {\r\n                // Highlight bottom border.\r\n                setHighlightedMove({areaX, areaY, bottom: true})\r\n            }\r\n        }\r\n    };\r\n\r\n    return (<td onMouseMove={handleMouseMove} className={color.toLowerCase() + \"Area\"} style={areaStyle}>\r\n        {moveToMake && moveToMake.areaX === areaX && moveToMake.areaY === areaY && (<Loader/>)}\r\n    </td>)\r\n};","import {BORDER_PERCENTAGE_OF_AREA} from \"../Game/configuration\";\r\n\r\nexport const VerticalMove = ({cellIndex, gameWidth, rowIndex, game, highlightedMove}) => {\r\n    const areaWidth = (100 - BORDER_PERCENTAGE_OF_AREA) / gameWidth + '%';\r\n    const borderWidth = BORDER_PERCENTAGE_OF_AREA / (gameWidth + 1) + '%';\r\n\r\n    const verticalBorderStyle = {\r\n        paddingBottom: areaWidth,\r\n        width: borderWidth,\r\n    }\r\n\r\n    const isPossibleRightMove = (rowIndex, cellIndex) => game.possibleMoves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.right);\r\n    const isHighlighted = highlightedMove?.areaX === cellIndex && highlightedMove?.areaY === rowIndex && highlightedMove?.right\r\n    const madeMoveColor = game.moves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.right)?.color?.toLowerCase();\r\n\r\n    return <>\r\n        {cellIndex !== gameWidth - 1 &&\r\n        <td style={verticalBorderStyle}\r\n            className={madeMoveColor ? madeMoveColor : isPossibleRightMove(rowIndex, cellIndex) ? isHighlighted ? 'highlightedBorder' : 'possibleMove border' : 'border'}/>}\r\n    </>;\r\n};","import {BORDER_PERCENTAGE_OF_AREA} from \"../Game/configuration\";\r\n\r\nexport const HorizontalMove = ({rowIndex, cellIndex, gameWidth, game, highlightedMove}) => {\r\n    const areaWidth = (100 - BORDER_PERCENTAGE_OF_AREA) / gameWidth + '%';\r\n    const borderWidth = BORDER_PERCENTAGE_OF_AREA / (gameWidth + 1) + '%';\r\n\r\n    const horizontalBorderStyle = {\r\n        paddingBottom: borderWidth,\r\n        width: areaWidth,\r\n    }\r\n\r\n    const isPossibleBottomMove = (rowIndex, cellIndex) => game.possibleMoves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.bottom);\r\n    const isHighlighted = highlightedMove?.areaX === cellIndex && highlightedMove?.areaY === rowIndex && highlightedMove?.bottom\r\n    const madeMoveColor = game.moves.find(pm => pm.areaX === cellIndex && pm.areaY === rowIndex && pm.bottom)?.color?.toLowerCase();\r\n\r\n    return <td style={horizontalBorderStyle}\r\n               className={madeMoveColor ? madeMoveColor : isPossibleBottomMove(rowIndex, cellIndex) ? isHighlighted ? 'highlightedBorder' : 'possibleMove border' : 'border'}\r\n    />;\r\n};","import {BORDER_PERCENTAGE_OF_AREA} from \"../Game/configuration\";\r\n\r\nexport const InbetweenDot = ({cellIndex, gameWidth}) => {\r\n    const borderWidth = BORDER_PERCENTAGE_OF_AREA / (gameWidth + 1) + '%';\r\n\r\n    const dotStyle = {\r\n        paddingBottom: borderWidth,\r\n        width: borderWidth,\r\n    }\r\n\r\n    return <>\r\n        {cellIndex !== gameWidth - 1 &&\r\n        <td\r\n            style={dotStyle} className={'border'}/>}\r\n    </>;\r\n};","import './InfoMessage.css';\r\n\r\nexport const InfoMessage = ({game}) => {\r\n    if (!game) return null\r\n\r\n    if (game.possibleMoves.length === 0) {\r\n        return (\r\n            <div className=\"infoMessage\">\r\n                <h1>Wait for <span style={{color: game.playerOnMove.toLowerCase()}}>other player</span> to move.</h1>\r\n                {game.moves.length === 0 && <p>Send him the URL if you have not already.</p>}\r\n            </div>);\r\n    }\r\n\r\n    if (game.moves.length === 0) {\r\n        return <div className=\"infoMessage\"><h1>Make your first move on the corners.</h1></div>;\r\n    }\r\n\r\n    if (game.over) {\r\n        const blue = game.score['BLUE']\r\n        const red = game.score['RED']\r\n\r\n        return (\r\n            <div className=\"infoMessage\">\r\n                <h1>Game Over</h1>\r\n                {blue > red && (\r\n                    <h2><span style={{color: 'blue'}}>BLUE</span> player won {blue} tiles to <span\r\n                        style={{color: 'red'}}>RED</span>'s {red} tiles.</h2>)}\r\n                {blue < red && (\r\n                    <h2><span style={{color: 'red'}}>RED</span> player won {red} tiles to <span\r\n                        style={{color: 'blue'}}>BLUE</span>'s {blue} tiles.</h2>)}\r\n                {blue === red && (\r\n                    <h2>It's a draw. <span style={{color: 'blue'}}>BLUE</span> player has {blue} tiles as well as <span\r\n                        style={{color: 'red'}}>RED</span> player.</h2>)}\r\n            </div>);\r\n    }\r\n\r\n    return null\r\n}","import './Game.css';\r\nimport {Fragment, useState} from \"react\";\r\nimport {useCreateNewGame} from \"../../hooks/useCreateNewGame\";\r\nimport {Area, HorizontalMove, InbetweenDot, InfoMessage, Loader, VerticalMove} from \"..\";\r\nimport {useMakeMove} from \"../../hooks/useMakeMove\";\r\nimport {useWaitingForAnotherPlayer} from \"../../hooks/useWaitingForAnotherPlayer\";\r\n\r\nconst Game = () => {\r\n    const [highlightedMove, setHighlightedMove] = useState()\r\n    const [moveToMake, setMoveToMake] = useState()\r\n    const {game, setGame} = useCreateNewGame()\r\n\r\n    useMakeMove(moveToMake, setMoveToMake, game, setGame);\r\n    useWaitingForAnotherPlayer(game, setGame)\r\n\r\n    if (!game) {\r\n        return <Loader/>\r\n    }\r\n\r\n    const gameWidth = game.areas[0].length;\r\n\r\n    const handleOnClick = () => {\r\n        if (game.possibleMoves.find(\r\n            pm => pm.areaX === highlightedMove?.areaX\r\n                && pm.areaY === highlightedMove?.areaY\r\n                && ((pm.right && highlightedMove?.right) || (pm.bottom && highlightedMove?.bottom)))) {\r\n            setMoveToMake(highlightedMove)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div onClick={handleOnClick}>\r\n            &nbsp;\r\n            <table>\r\n                <tbody>\r\n                {game.areas.map((row, rowIndex) => {\r\n                    return (\r\n                        <Fragment key={'row-' + rowIndex}>\r\n                            <tr>\r\n                                {row.map((cell, cellIndex) => {\r\n                                    return (\r\n                                        <Fragment key={'cell-' + rowIndex + \"-\" + cellIndex}>\r\n                                            <Area gameWidth={gameWidth} color={cell} areaY={rowIndex} areaX={cellIndex}\r\n                                                  setHighlightedMove={setHighlightedMove} moveToMake={moveToMake}/>\r\n                                            <VerticalMove cellIndex={cellIndex} gameWidth={gameWidth}\r\n                                                          rowIndex={rowIndex} game={game}\r\n                                                          highlightedMove={highlightedMove}/>\r\n                                        </Fragment>)\r\n                                })}\r\n                            </tr>\r\n                            {rowIndex !== game.areas.length - 1 && (\r\n                                <tr key={'bottom-borders-of-row-' + rowIndex}>\r\n                                    {row.map((cell, cellIndex) => {\r\n                                        return (<Fragment key={'bottom-border-of-cell-' + rowIndex + \"-\" + cellIndex}>\r\n                                                <HorizontalMove rowIndex={rowIndex} cellIndex={cellIndex}\r\n                                                                gameWidth={gameWidth} highlightedMove={highlightedMove}\r\n                                                                game={game}/>\r\n                                                <InbetweenDot cellIndex={cellIndex} gameWidth={gameWidth}/>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                    }\r\n                                </tr>)}\r\n                        </Fragment>)\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <InfoMessage game={game}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import {useEffect, useState} from \"react\";\r\nimport {BACKEND_URL} from \"../components/Game/configuration\";\r\n\r\nexport const useCreateNewGame = () => {\r\n    const [game, setGame] = useState()\r\n\r\n    useEffect(() => {\r\n        const gameId = document.location.hash?.substring(1)\r\n        let lastPlayerColor = sessionStorage.getItem('playerColor')\r\n        const lastGameId = sessionStorage.getItem('playerColor')\r\n        if (gameId !== lastGameId) {\r\n            lastPlayerColor = null\r\n        }\r\n\r\n        if (gameId?.length > 0) {\r\n            fetch(BACKEND_URL + \"get-game-status\", {\r\n                method: 'POST', body: JSON.stringify({gameId, playerAsking: lastPlayerColor}), headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setGame(data);\r\n                    sessionStorage.setItem('playerColor', data.yourPlayerColor)\r\n                    sessionStorage.setItem('gameId', data.gameId)\r\n                });\r\n\r\n        } else {\r\n            fetch(BACKEND_URL + \"create-new-game\", {\r\n                method: 'POST', body: \"{}\", headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setGame(data);\r\n                    document.location.hash = data.gameId;\r\n                    sessionStorage.setItem('playerColor', data.yourPlayerColor)\r\n                    sessionStorage.setItem('gameId', data.gameId)\r\n                });\r\n        }\r\n    }, [])\r\n\r\n    return {game, setGame};\r\n}","import {useEffect} from \"react\";\r\nimport {BACKEND_URL} from \"../components/Game/configuration\";\r\n\r\nexport const useMakeMove = (moveToMake, setMoveToMake, game, setGame) => {\r\n    useEffect(() => {\r\n        if (!moveToMake) return\r\n\r\n        fetch(BACKEND_URL + \"make-move\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                gameId: game.gameId,\r\n                move: moveToMake,\r\n                player: sessionStorage.getItem('playerColor')\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setMoveToMake(null)\r\n                setGame(data);\r\n            });\r\n    }, [game?.gameId, game?.playerOnMove, moveToMake, setGame, setMoveToMake])\r\n}","import {useEffect} from \"react\";\r\nimport {BACKEND_URL} from \"../components/Game/configuration\";\r\n\r\nexport const useWaitingForAnotherPlayer = (game, setGame) => {\r\n    useEffect(() => {\r\n        if (!game || game.possibleMoves.length > 0) return\r\n\r\n        setTimeout(() =>\r\n            fetch(BACKEND_URL + \"get-game-status\", {\r\n                method: 'POST', body: JSON.stringify({\r\n                    gameId: game.gameId,\r\n                    playerAsking: sessionStorage.getItem('playerColor'),\r\n                    incremental: true\r\n                }), headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => setGame(data)), 2000);\r\n    }, [game, setGame])\r\n}","import Game from \"./components/Game/Game\";\n\nconst App = () => <Game/>;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}